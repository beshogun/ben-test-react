{"version":3,"sources":["components/spinner.component.jsx","components/main.component.jsx","components/header.component.jsx","async/fetch.jsx","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","src","autoPlay","Main","user","Card","image","alt","firstName","lastName","Header","GetUsers","a","fetch","usersResponse","json","users","console","log","App","useState","rippleOff","ripple","setRipple","loaded","setUsers","useEffect","newUsers","data","runEffect","window","addEventListener","handleScroll","setTimeout","e","target","scrollHeight","scrollTop","clientHeight","M","toast","html","onScroll","map","key","id","first_name","last_name","avatar","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qVAgBeA,G,YAbC,WACd,OACE,yBAAKC,UAAU,aACb,6BACE,2BAAOC,IAAI,wBAAwBC,UAAQ,KAE7C,yBAAKF,UAAU,iBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,c,gBCONG,EAdF,SAACC,GACZ,OAEI,kBAACC,EAAA,EAAD,CAAML,UAAU,aACd,yBAAKA,UAAU,YACb,yBAAKA,UAAU,QAAQC,IAAKG,EAAKE,MAAOC,IAAI,iBAE9C,yBAAKP,UAAU,aACb,0BAAMA,UAAU,QAAQI,EAAKI,UAAY,IAAMJ,EAAKK,aCA/CC,G,MAVC,WACZ,OACI,yBAAKV,UAAU,gBACX,yBAAKA,UAAU,UACf,0BAAMA,UAAU,oBAAhB,aCMGW,EAXD,uCAAG,8BAAAC,EAAA,+EAEmBC,MAAM,gCAFzB,cAEHC,EAFG,gBAGWA,EAAcC,OAHzB,cAGHC,EAHG,yBAIFA,GAJE,kCAMTC,QAAQC,IAAI,sBANH,0DAAH,qD,wBC4DCC,EApDH,WAAO,IAAD,EACYC,mBAAS,CACnCC,WAAW,IAFG,mBACTC,EADS,KACDC,EADC,OAIUH,mBAAS,CACjCJ,MAAO,GACPQ,QAAQ,IANM,mBAITR,EAJS,KAIFS,EAJE,KAShBC,qBAAU,WACHV,EAAMQ,SACM,uCAAG,4BAAAZ,EAAA,sEACOD,IADP,OACVgB,EADU,OAEhBF,EAAS,CAAET,MAAOW,EAASC,KAAMJ,QAAQ,IAFzB,2CAAH,oDAIfK,GACAC,OAAOC,iBAAiB,SAAUC,MAGnC,IAEHC,YAAW,WACTV,EAAU,CAAEF,WAAW,MACtB,KAEH,IAAMW,EAAe,SAACE,GAChBA,EAAEC,OAAOC,aAAeF,EAAEC,OAAOE,YAAcH,EAAEC,OAAOG,cAC1DC,IAAEC,MAAM,CAAEC,KAAM,oBAIpB,OACE,yBAAKzC,UAAU,QACXsB,EAAOD,WAAaL,EAAMA,MAC1B,kBAAC,EAAD,MAEA,yBAAKhB,UAAU,aAAa0C,SAAUV,GACpC,kBAAC,EAAD,MACChB,EAAMA,MAAM2B,KAAI,SAACvC,GAAD,OACf,kBAAC,EAAD,CACEwC,IAAKxC,EAAKyC,GACVrC,UAAWJ,EAAK0C,WAChBrC,SAAUL,EAAK2C,UACfzC,MAAOF,EAAK4C,eCxCNC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.590ae5f2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./spinner.styles.scss\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"container\">\n      <div>\n        <audio src=\"./../design/pulse.mp4\" autoPlay />\n      </div>\n      <div className=\"small-circle\"></div>\n      <div className=\"medium-circle\"></div>\n      <div className=\"circle\"></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport \"./main.styles.scss\";\nimport Card from \"@material-ui/core/Card\";\n\nconst Main = (user) => {\n  return (\n    \n      <Card className=\"user__box\">\n        <div className=\"img__box\">\n          <img className=\"image\" src={user.image} alt=\"profile pic\" />\n        </div>\n        <div className=\"text__box\">\n          <span className=\"name\">{user.firstName + \" \" + user.lastName}</span>\n        </div>\n      </Card>\n  );\n};\n\nexport default Main;\n","import React from 'react'\nimport './header.styles.scss'\n const Header = () => {\n    return (\n        <div className=\"header__box-\">\n            <div className=\"header\">\n            <span className=\"text__box-header\">Users</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","\nconst GetUsers = async () => {\n    try {\n        const usersResponse = await fetch('https://reqres.in/api/users?')\n        const users = await usersResponse.json();\n        return users\n    } catch(err) {\n        console.log('there was an error')\n    }\n    \n}\n\nexport default GetUsers","import React, { useEffect, useState } from \"react\";\nimport \"./app.styles.scss\";\nimport Spinner from \"./components/spinner.component\";\nimport Main from \"./components/main.component\";\nimport Header from \"./components/header.component\";\nimport GetUsers from \"./async/fetch\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport M from \"materialize-css\";\n\nconst App = () => {\n  const [ripple, setRipple] = useState({\n    rippleOff: false,\n  });\n  const [users, setUsers] = useState({\n    users: [],\n    loaded: false,\n  });\n\n  useEffect(() => {\n    if (!users.loaded) {\n      const runEffect = async () => {\n        const newUsers = await GetUsers();\n        setUsers({ users: newUsers.data, loaded: true });\n      };\n      runEffect();\n      window.addEventListener(\"scroll\", handleScroll);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  setTimeout(() => {\n    setRipple({ rippleOff: true });\n  }, 3000);\n\n  const handleScroll = (e) => {\n    if (e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight) {\n      M.toast({ html: \"no more users!\" });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!ripple.rippleOff && users.users ? (\n        <Spinner />\n      ) : (\n        <div className=\"users__box\" onScroll={handleScroll}>\n          <Header/>\n          {users.users.map((user) => (\n            <Main\n              key={user.id}\n              firstName={user.first_name}\n              lastName={user.last_name}\n              image={user.avatar}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}